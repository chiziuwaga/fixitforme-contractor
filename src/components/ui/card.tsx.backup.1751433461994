import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { motion, type MotionProps } from "framer-motion"

import { cn } from "@/lib/utils"

const cardVariants = cva(
  "rounded-xl border text-card-foreground transition-shadow duration-300",
  {
    variants: {
      variant: {
        default: "bg-card shadow-sm border-border",
        elevated: "bg-card shadow-lg shadow-primary/10 border-border",
        // The premier variant for the FixItForMe contractor application.
        // Combines glassmorphism with interactive, premium feedback.
        glass: [
          "backdrop-blur-md bg-background/60 dark:bg-black/50",
          "border-primary/20",
          "shadow-xl shadow-primary/15",
          "cursor-pointer",
          "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 ring-offset-background",
          "data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[disabled]:cursor-not-allowed",
        ],
        interactive: [
          "bg-card shadow-sm",
          "border-border",
          "cursor-pointer",
          "hover:shadow-lg hover:shadow-primary/10 hover:border-primary/40",
          "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 ring-offset-background",
          "data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[disabled]:cursor-not-allowed",
        ],
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface CardProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof cardVariants> {
  /**
   * If true, the card will be rendered in a disabled state,
   * primarily affecting 'interactive' and 'glass' variants.
   */
  disabled?: boolean
}

/**
 * A premium card component for professional contractor workflows.
 * Features a 'glass' variant for a modern, sophisticated UI.
 * Integrates Framer Motion for smooth, satisfying interactions.
 *
 * NOTE: `framer-motion` is a required peer dependency for animations.
 */
const Card = React.forwardRef<HTMLDivElement, CardProps>(
  ({ className, variant, disabled = false, ...props }, ref) => {
    const isInteractive = variant === "interactive" || variant === "glass"

    const motionProps: MotionProps | undefined =
      isInteractive && !disabled
        ? {
            whileHover: { y: -4, scale: 1.02 },
            whileTap: { scale: 0.98, y: -2 },
            transition: { type: "spring", stiffness: 300, damping: 20 },
          }
        : undefined

    return (
      <motion.div
        ref={ref}
        className={cn(cardVariants({ variant, className }))}
        role={isInteractive ? "button" : undefined}
        tabIndex={isInteractive && !disabled ? 0 : -1}
        aria-disabled={isInteractive ? disabled : undefined}
        data-disabled={isInteractive && disabled ? "" : undefined}
        {...motionProps}
        {...props}
      />
    )
  }
)
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & {
    compact?: boolean
  }
>(({ className, compact = false, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "flex flex-col space-y-1.5",
      compact ? "p-4" : "p-6",
      className
    )}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

export interface CardTitleProps
  extends React.HTMLAttributes<HTMLHeadingElement> {
  level?: 1 | 2 | 3 | 4 | 5 | 6
  variant?: "default" | "primary" | "secondary" | "accent"
}

const CardTitle = React.forwardRef<HTMLHeadingElement, CardTitleProps>(
  ({ className, level = 3, variant = "default", ...props }, ref) => {
    const Component = `h${level}` as React.ElementType
    return (
      <Component
        ref={ref}
        className={cn(
          "font-semibold leading-none tracking-tight",
          {
            "text-3xl": level === 1,
            "text-2xl": level === 2,
            "text-xl": level === 3,
            "text-lg": level >= 4,
          },
          {
            "text-foreground": variant === "default",
            "text-primary": variant === "primary",
            "text-secondary": variant === "secondary",
            "text-accent": variant === "accent",
          },
          className
        )}
        {...props}
      />
    )
  }
)
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & {
    compact?: boolean
    noPadding?: boolean
  }
>(({ className, compact = false, noPadding = false, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      !noPadding && (compact ? "p-4 pt-0" : "p-6 pt-0"),
      className
    )}
    {...props}
  />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & {
    justify?: "start" | "center" | "end" | "between"
    compact?: boolean
  }
>(({ className, justify = "end", compact = false, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "flex items-center border-t", // The border color is inherited from the parent Card
      compact ? "p-4" : "p-6",
      {
        "justify-start": justify === "start",
        "justify-center": justify === "center",
        "justify-end": justify === "end",
        "justify-between": justify === "between",
      },
      className
    )}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

const CardActions = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & {
    justify?: "start" | "center" | "end"
  }
>(({ className, justify = "end", ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "flex flex-1 items-center gap-2",
      {
        "justify-start": justify === "start",
        "justify-center": justify === "center",
        "justify-end": justify === "end",
      },
      className
    )}
    role="group"
    aria-label="Card actions"
    {...props}
  />
))
CardActions.displayName = "CardActions"

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
  CardActions,
}